FROM python:3.11-slim

# Install all system dependencies in a single optimized layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build tools
    wget curl unzip git gcc g++ build-essential \
    # Graphics libraries for AI models
    libgl1-mesa-dev libglu1-mesa-dev libglx-mesa0 mesa-common-dev \
    # Core system libraries
    libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1 \
    # Browser dependencies for Playwright
    libnspr4 libnss3 libdbus-1-3 libatk1.0-0 libatk-bridge2.0-0 \
    libcups2 libxkbcommon0 libatspi2.0-0 libxcomposite1 libxdamage1 \
    libxrandr2 libgbm1 libcairo2 libpango-1.0-0 libasound2 libgtk-3-0 \
    # Additional Playwright dependencies
    fonts-liberation fonts-unifont libgdk-pixbuf-2.0-0 libjpeg62-turbo xvfb \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set working directory
WORKDIR /app

# Set build args and environment variables early
ARG AI_MODE=full
ENV AI_MODE_BUILD=${AI_MODE}
ENV AI_MODE=full
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PORT=8001

# Copy requirements files for dependency caching
COPY requirements-railway-complete.txt requirements-railway-fixed.txt requirements-minimal.txt requirements-full.txt requirements-ai-stable.txt ./

# Install Python dependencies in optimized order (base packages first, then AI models)
RUN echo "🚀 Installing base Python dependencies..." && \
    pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu && \
    pip install --no-cache-dir -r requirements-railway-complete.txt

# Install AI models in separate layer for better caching
RUN echo "🔥 Installing AI models..." && \
    pip install --no-cache-dir git+https://github.com/facebookresearch/segment-anything-2.git && \
    pip install --no-cache-dir git+https://github.com/openai/CLIP.git && \
    pip install --no-cache-dir iopath hydra-core omegaconf

# Install Playwright browsers (skip if fails to avoid build failure)
RUN python -m playwright install chromium || echo "⚠️ Playwright browser install failed, will retry at runtime"

# Create all necessary directories
RUN mkdir -p /app/temp /app/downloads /app/checkpoints \
    /app/model_cache/sam2 /app/model_cache/clip /app/model_cache/grounding_dino /app/model_cache/yolo \
    /app/cache_volume/huggingface /app/cache_volume/spacy /app/cache_volume/playwright \
    /app/cache_volume/pip /app/cache_volume/nltk /app/cache_volume/matplotlib /app/cache_volume/masks

# Copy application code (do this late to optimize layer caching)
COPY . .

# Copy models Python source code to safe location
COPY models/ /app/models_src/
RUN cp -r /app/models_src/* /app/models/ 2>/dev/null || echo "No models to copy"

# Set all environment variables
ENV PYTHONPATH=/app:/app/models:/app/models_src
ENV CLASSIFICATION_ENHANCED=true
ENV KEYWORD_SYSTEM_VERSION=2.0
ENV MODEL_CACHE_DIR=/app/model_cache
ENV SAM2_CHECKPOINT_DIR=/app/model_cache/sam2
ENV CLIP_CACHE_DIR=/app/model_cache/clip
ENV YOLO_CACHE_DIR=/app/model_cache/yolo
ENV TRANSFORMERS_CACHE=/app/cache_volume/huggingface
ENV HF_HOME=/app/cache_volume/huggingface
ENV SENTENCE_TRANSFORMERS_HOME=/app/cache_volume/huggingface/sentence_transformers
ENV SPACY_DATA=/app/cache_volume/spacy
ENV PLAYWRIGHT_BROWSERS_PATH=/app/cache_volume/playwright
ENV PIP_CACHE_DIR=/app/cache_volume/pip
ENV NLTK_DATA=/app/cache_volume/nltk
ENV MPLCONFIGDIR=/app/cache_volume/matplotlib

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Use Railway-optimized entry point
CMD python main_railway.py