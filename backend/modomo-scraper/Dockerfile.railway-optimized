# Railway-optimized Dockerfile with maximum caching efficiency
FROM python:3.11-slim

# Install system dependencies (this layer rarely changes)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl wget git gcc g++ build-essential \
    libgl1-mesa-dev libglu1-mesa-dev libglx-mesa0 mesa-common-dev \
    libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1 \
    libnspr4 libnss3 libdbus-1-3 libatk1.0-0 libatk-bridge2.0-0 \
    libcups2 libxkbcommon0 libatspi2.0-0 libxcomposite1 libxdamage1 \
    libxrandr2 libgbm1 libcairo2 libpango-1.0-0 libasound2 libgtk-3-0 \
    fonts-liberation fonts-unifont libgdk-pixbuf-2.0-0 libjpeg62-turbo xvfb \
    && rm -rf /var/lib/apt/lists/* && apt-get clean

WORKDIR /app

# Environment variables (set early for better caching)
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PORT=8001
ENV AI_MODE=full
ENV TRANSFORMERS_CACHE=/app/models/huggingface
ENV HF_HOME=/app/models/huggingface
ENV SENTENCE_TRANSFORMERS_HOME=/app/models/sentence_transformers
ENV MODEL_CACHE_DIR=/app/models
ENV SAM2_CHECKPOINT_DIR=/app/models/sam2
ENV CLIP_CACHE_DIR=/app/models/clip
ENV YOLO_CACHE_DIR=/app/models/yolo

# Copy requirements first for better Docker layer caching
COPY requirements-railway-complete.txt ./

# Install base Python packages (cached unless requirements change)
RUN pip install --upgrade pip setuptools wheel

# Install PyTorch CPU-only first (large, stable dependency)
RUN pip install --no-cache-dir \
    "torch==2.1.2+cpu" \
    "torchvision==0.16.2+cpu" \
    "torchaudio==2.1.2+cpu" \
    -f https://download.pytorch.org/whl/torch_stable.html

# Install core ML packages (cached layer)
RUN pip install --no-cache-dir \
    "transformers>=4.30.0,<4.40.0" \
    "sentence-transformers>=2.2.0,<3.0.0" \
    "huggingface-hub>=0.19.0" \
    opencv-python-headless \
    Pillow \
    scikit-image \
    numpy \
    scipy

# Install remaining requirements (this layer changes when requirements change)
RUN pip install --no-cache-dir -r requirements-railway-complete.txt

# Install git-based AI models (cached unless git refs change)
RUN pip install --no-cache-dir \
    git+https://github.com/facebookresearch/segment-anything-2.git \
    git+https://github.com/openai/CLIP.git \
    iopath hydra-core omegaconf

# Install Playwright browsers (cached layer)
RUN python -m playwright install chromium || echo "⚠️ Playwright install failed, will retry at runtime"

# Create directory structure
RUN mkdir -p /app/temp /app/downloads /app/checkpoints /app/models \
    /app/models/sam2 /app/models/clip /app/models/yolo /app/models/huggingface \
    /app/models/sentence_transformers /app/cache_volume

# Copy application code (this changes most frequently, so it's last)
COPY . .

# Copy models source code if it exists
RUN if [ -d "models/" ]; then \
        cp -r models/ /app/models_src/ && \
        cp -r /app/models_src/* /app/models/ || true; \
    fi

# Set Python path
ENV PYTHONPATH=/app:/app/models:/app/models_src
ENV CLASSIFICATION_ENHANCED=true
ENV KEYWORD_SYSTEM_VERSION=2.0

# Make entrypoint executable
RUN chmod +x /app/docker-entrypoint.sh || echo "No entrypoint script found"

# Health check with reasonable timeout for model loading
HEALTHCHECK --interval=30s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Use entrypoint if available, otherwise direct command
CMD ["python", "main_railway.py"]